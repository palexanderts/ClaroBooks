@page "/edit/{id:int}"
@using Domain.DomainEvents
@inject BookServiceOnline BookServiceOnline
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <h3>Editar Libro</h3>

    <EditForm Model="book" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label>Título:</label>
            <InputText @bind-Value="book.Title" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Descripción:</label>
            <InputTextArea @bind-Value="book.Description" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Número de Páginas:</label>
            <InputNumber @bind-Value="book.PageCount" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Extracto:</label>
            <InputTextArea @bind-Value="book.Excerpt" class="form-control" />
        </div>
        <div class="mb-3">
            <label>Fecha de Publicación:</label>
            <InputDate @bind-Value="book.PublishDate" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancelar</button>
    </EditForm>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Domain.Books.Book book;

    protected override async Task OnInitializedAsync()
    {
        var result = await BookServiceOnline.GetBookByIdAsync(Id);
        if (result.Type == DomainEventMesage.EventType.Ok)
        {
            this.book = result.Data;
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await BookServiceOnline.UpdateBookAsync(book);
        if (response.Type == DomainEventMesage.EventType.Ok)
        {
            NavigationManager.NavigateTo("/books");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/books");
    }
}
